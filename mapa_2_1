library(shiny)
library(highcharter)
library(lubridate)
library(tidyverse)
library(shinydashboard)
library(shinyWidgets)
library(googlesheets4)
library(shinydashboardPlus)
library(leaflet)
library(leaflet.extras)
library(htmltools)
library(sf)
library(datasets)
library(shinyjs)
library(DT)
library(ggplot2)
library(dplyr)

# Cargar datos
load("arch_shape.RData")
load("arch_ubicaciones.RData")
load("Informes.RData")
load("resumen_datos.RData")
load("datos_resumen.RData")
load("res_productos.RData")
load("res_saldo.RData")
load("Personas_Juridicas.RData")
load("Personas_Juridicas_Transacciones.RData")
load("dpf_pj.RData")

# Iconos
personas <- tags$i(class = "fa fa-users", style = "color: white")
agencia <- tags$i(class = "fa fa-university", style = "color: white")

# Header
header <- dashboardHeader(title = "Riesgos", titleWidth = 250)

# Sidebar
sidebar <- dashboardSidebar(
  width = 250,
  sidebarMenu(
    id = 'sidebar',
    menuItem("Datos de Cabecera", tabName = 'menu_1', icon = icon("table")),
    menuItem("Clientes y Saldos", tabName = 'menu_2', icon = icon("money")),
    menuItem("Documentos de Clientes", tabName = 'menu_3', icon = icon("list"))
  )
)

# Body
body <- dashboardBody(
  useShinyjs(),
  tags$head(tags$style(HTML('
    .small-box.bg-purple { background-color: #56147DFF !important; color: white !important; }
    .skin-purple .main-header .logo { background-color: #56147DFF; }
    .skin-purple .main-header .logo:hover { background-color: #56147DFF; }
    .skin-purple .main-header .navbar { background-color: #56147DFF; }
    .skin-purple .main-sidebar { background-color: #56147DFF; }
    .small-box.bg-navy { background-color: #56147DFF !important; color: #56147DFF}
    .box.box-solid.box-primary>.box-header { color: white; background:#56147DFF; }
    .box.box-solid.box-primary { color: #56147DFF; border-color: #56147DFF; }
    .btn-primary { background-color: #56147DFF; border-color: #56147DFF; }
    .text-muted { color: white; }
    .selected { background-color: orange !important; }
    .bg-aqua { background-color: #fff !important; }

    /* Bordes naranjas vivos en las cajas */
      .box {
        border: 1px solid #56147D !important;
        box-shadow: 0 0 10px rgba(255, 127, 0, 0.6);
      }

      /* Título del box con fondo degradado naranja a púrpura y letras blancas */
    .box-header.with-border {
      background: linear-gradient(to right, #330099, #660066, #FF6600 ) !important;
      color: white !important;
      font-weight: bold;
      font-size: 18px;
    }
/* Contenedor con borde degradado */
    .gradient-border-box {
      position: relative;
      padding: 2px; /* Espesor del "borde" */
      border-radius: 5px;
      background: linear-gradient(to right, #FF7F00, #56147D);
      margin-bottom: 15px;
    }
    /* Box real con fondo blanco, para simular el borde */
    .gradient-border-box > .box {
      background: white !important;
      border: none !important;
      border-radius: 3px;
      box-shadow: none !important;
      padding: 10px;
    }
    /* Mantener título con fondo púrpura y texto blanco */
    .gradient-border-box > .box .box-header.with-border {
      background-color: #56147D !important;
      color: white !important;
      border-top-left-radius: 3px;
      border-top-right-radius: 3px;
    }

  '))),
  tabItems(
    # Pestaña 1: Datos de Cabecera
    tabItem(tabName = 'menu_1',
            fluidRow(
              box(solidHeader = FALSE, title = "Tasa de ROS e Inusuales", background = NULL, width = 5, status = "warning",
                  fluidRow(
                    column(width = 6, valueBoxOutput("progressBox", width = 12)),
                    column(width = 6, valueBoxOutput("progressInus", width = 12))
                  )
              ),
              box(
                solidHeader = FALSE,
                title = "Clasificación de clientes",
                background = NULL,
                width = 7,
                status = "orange",
                fluidRow(
                  column(width = 12,
                         fluidRow(
                           column(width = 3, offset = 0, style='padding-left:0px; padding-right:0.5px; padding-top:3px; padding-bottom:5px',
                                  tags$div(class = "value-box-clickable",valueBoxOutput("box_1", width = 12))
                           )
                           ,
                           column(width = 3, offset = 0, style='padding-left:0px; padding-right:0.1px; padding-top:2.9px; padding-bottom:5px',
                                  tags$div(class = "value-box-clickable",valueBoxOutput("box_2", width = 12))
                           ),
                           column(width = 2, offset = 0, style='padding-left:0px; padding-right:0.1px; padding-top:2.9px; padding-bottom:5px',
                                  tags$div(class = "value-box-clickable",valueBoxOutput("box_3", width = 12))),
                           column(width = 2, offset = 0, style='padding-left:0px; padding-right:0.1px; padding-top:2.9px; padding-bottom:5px',
                                  tags$div(class = "value-box-clickable",valueBoxOutput("box_4", width = 12))),
                           column(width = 2, offset = 0, style='padding-left:0px; padding-right:0.1px; padding-top:2.9px; padding-bottom:5px',
                                  valueBoxOutput("box_5", width = 12)),
                         )
                  )
                )
              )
            ),
            fluidRow(
              box(title = "Puntos de atención financieros", solidHeader = TRUE, width = 3,
                  style = "min-height: 650px;",
                  #height = "600px", collapsible = TRUE,
                  status = "primary", highchartOutput("graf_1", height = "600px")),


              box(title = "Mapa de concentración",
                  solidHeader = T,
                  width = 9,
                  style = "min-height: 600px;",
                  #height = "650px",
                  collapsible = T,
                  status = "primary",
                  leafletOutput("map", height = "600px"),
                  selectizeInput(inputId = "selected_locations", ###CREA EL WIDGET QUE PERMITE SELECCIONAR LOS DEPARTAMENTOS
                                 label = "Selected:",
                                 choices = c("BENI","CHUQUISACA","COCHABAMBA","LA PAZ","ORURO","PANDO","POTOSI","SANTA CRUZ","TARIJA" ),
                                 selected = NULL,
                                 multiple = TRUE)
                  )

            ),
            fluidRow(
              box(title = "Lista clientes jurídicos y saldos en C.A.", solidHeader = TRUE, width = 12, collapsible = TRUE,
                  status = "primary", DTOutput("tabla", height = "470px"))
            ),
    ),
    # Pestaña 2: Clientes y Saldos
    tabItem(tabName = 'menu_2',
            fluidRow(
              box(title = "Lista de Clientes Jurídicos y Saldos en C.A.", solidHeader = TRUE, width = 12, status = "primary", DTOutput("clientes_saldos", height = "250px"))
            ),
            fluidRow(
              box(title = "Depósitos a Plazo Fijo", solidHeader = TRUE, width = 6, status = "primary", DTOutput("depositos_plazo", height = "250px")),
              box(title = "Tipo de Actividad Económica", solidHeader = TRUE, width = 6, status = "primary", DTOutput("tipo_actividad", height = "250px"))
            ),
            fluidRow(
              box(title = "Movimiento Transaccional por Tipo", solidHeader = TRUE, width = 12, status = "primary", highchartOutput("graf_transac", height = "400px"))
            )
    ),
    # Pestaña 3: Lista de Clientes
    # UI - pestaña 3
    tabItem(
      tabName = "menu_3",
      fluidRow(
        column(12,
               box(title = "Lista de Personas Jurídicas",
                   width = 12, status = "warning",
                   DTOutput("tabla_clientes"))
        )
      ),

      fluidRow(
                column(6,
                       box(title = "Exploración de Carpetas y Archivos",
                           width = 12, status = "primary", solidHeader = TRUE,
                           uiOutput("selector_carpetas"),
                           uiOutput("selector_pdfs")
                       )
                ),
                column(6,

                       box(title = "Cargar Nuevo Archivo PDF",
                           width = 12, status = "primary", solidHeader = TRUE,
                           fileInput("archivo_subido", "Subir archivo PDF", accept = ".pdf"),
                           actionButton("subir_btn", "Guardar archivo en carpeta del cliente"),
                           uiOutput("mensaje_subida")
                       )
                )
      ),

      fluidRow(
        column(12,
               box(title = "Visor PDF",
                   width = 12, status = "orange",
                   uiOutput("visor_pdf"))
        )
      )
    )
  )
)

# UI y Server
ui <- dashboardPage(header, sidebar, body, skin = "purple")

server <- function(input, output, session) {

  # Reactivos comunes
  reactivo_1 <- reactive({
    req(input$selected_locations)
    Informes %>% filter(DEPARTAMENTO %in% input$selected_locations & Informe == "SI")
  })
  reactivo_inus <- reactive({
    req(input$selected_locations)
    Informes %>% filter(DEPARTAMENTO %in% input$selected_locations)
  })
  reac_riesgo_pj <- reactive({
    req(input$selected_locations)
    Personas_Juridicas %>% filter(DEPARTAMENTO %in% input$selected_locations) %>% count(TIPO_RIESGO)
  })
  reac_dpf <- reactive({
    req(input$selected_locations)
    dpf_pj %>% filter(DEPARTAMENTO %in% input$selected_locations)
  })
  reac_transac <- reactive({
    req(input$selected_locations)
    Personas_Juridicas_Transacciones %>% filter(DEPARTAMENTO %in% input$selected_locations)
  })

  # ValueBoxes para pestaña 1
  output$progressBox <- renderValueBox({
    total_pj <- nrow(Personas_Juridicas %>% filter(DEPARTAMENTO %in% input$selected_locations))
    total_ros <- nrow(reactivo_1() %>% filter(TIPO_DE_PERSONA == "JURIDICA"))
    total_inus <- nrow(reactivo_inus() %>% filter(TIPO_DE_PERSONA == "JURIDICA"))
    valueBox(
      ifelse(total_pj > 0, paste0(round(total_ros / total_pj, 4) * 100, "%"), "0"),
      paste(total_inus, "ROS de", total_pj, "Clientes jurídicos"),
      icon = personas,
      color = "purple"
    )
  })
  output$progressInus <- renderValueBox({
    total_ros <- nrow(reactivo_1() %>% filter(TIPO_DE_PERSONA == "JURIDICA"))
    total_inus <- nrow(reactivo_inus() %>% filter(TIPO_DE_PERSONA == "JURIDICA"))
    valueBox(
      ifelse(total_inus > 0, paste0(round(total_ros / total_inus, 3) * 100, "%"), "0"),
      paste(total_ros, "ROS de", total_inus, "Inusuales"),
      icon = personas,
      color = "purple"
    )
  })
  output$box_1 <- renderValueBox({
    alto_riesgo <- reac_riesgo_pj() %>% filter(TIPO_RIESGO == "RIESGO ALTO") %>% summarise(n = sum(n)) %>% pull(n)
    total <- sum(reac_riesgo_pj()$n)
    valueBox(
      ifelse(!is.na(alto_riesgo) && total > 0, paste0(round(alto_riesgo / total, 3) * 100, "%"), "0"),
      paste(ifelse(!is.na(alto_riesgo), prettyNum(alto_riesgo, big.mark = ","), "0"), "Alto riesgo"),
      icon = tags$i(class = "fa fa-university", style = "font-size: 45px; color: white; vertical-align: super;"),
      color = color1()
      )
  })
  output$box_2 <- renderValueBox({
    medio_riesgo <- reac_riesgo_pj() %>% filter(TIPO_RIESGO == "RIESGO MEDIO") %>% summarise(n = sum(n)) %>% pull(n)
    total <- sum(reac_riesgo_pj()$n)
    valueBox(
      ifelse(!is.na(medio_riesgo) && total > 0, paste0(round(medio_riesgo / total, 3) * 100, "%"), "0"),
      paste(ifelse(!is.na(medio_riesgo), prettyNum(medio_riesgo, big.mark = ","), "0"), "Medio riesgo"),
      icon = tags$i(class = "fa fa-university", style = "font-size: 45px; color: white; vertical-align: super;"),
      color = color2()
    )
  })
  output$box_3 <- renderValueBox({
    bajo_riesgo <- reac_riesgo_pj() %>% filter(TIPO_RIESGO == "RIESGO BAJO") %>% summarise(n = sum(n)) %>% pull(n)
    total <- sum(reac_riesgo_pj()$n)
    valueBox(
      ifelse(!is.na(bajo_riesgo) && total > 0, paste0(round(bajo_riesgo / total, 3) * 100, "%"), "0"),
      paste(ifelse(!is.na(bajo_riesgo), prettyNum(bajo_riesgo, big.mark = ","), "0"), "Bajo riesgo"),
      icon = tags$i(class = "fa fa-university", style = "font-size: 15px; color: white; vertical-align: super;"),
      color = color3()    )
  })
  output$box_4 <- renderValueBox({
    valueBox(
      value = nrow(reac_dpf()),
      subtitle = "Cantidad DPF",
      icon = tags$i(class = "fa fa-money", style = "font-size: 20px; color: white; vertical-align: super;"),
      color = color4()
    )
  })

  output$box_5<- renderValueBox({
    valueBox(
      subtitle = "",
      value=NULL
    )
  })

  # Gráfico puntos de atención financieros
  output$graf_1 <- renderHighchart({
    req(input$selected_locations)
    resumen <- arch_ubicaciones %>% filter(Departamento %in% input$selected_locations)
    resumen1 <- resumen %>% count(Tipo_de_Oficina, sort = TRUE) %>% mutate(Cantidad = paste("Cantidad:", nrow(resumen)))
    hchart(resumen1, "bar", hcaes(x = Tipo_de_Oficina, y = n, group = Cantidad), stacking = list(enabled = TRUE), dataLabels = list(enabled = TRUE)) %>%
      hc_add_theme(hc_theme_google()) %>%
      hc_colors(c("orange", "#56147DFF")) %>%
      hc_yAxis(title = list(text = "")) %>%
      hc_xAxis(title = list(text = ""))
  })

  # Mapa de concentración

  output$map <- renderLeaflet({
    res_cli<-Personas_Juridicas %>% filter(DEPARTAMENTO!="NO DEFINIDO") %>% count(DEPARTAMENTO)
    names(res_cli)[2]="densidad"
    arch_shape<- arch_shape %>% left_join(res_cli,by=c("NAME_1"="DEPARTAMENTO"))
    percentiles<-quantile(res_cli$densidad, probs = c(0,0.10, 0.30, 0.50, 0.60,0.7,0.8, 0.90), type = 7)
    bins <- c(round(as.numeric(percentiles)), Inf)
    pal <- colorBin("YlOrRd", domain = arch_shape$densidad, bins = bins)
    getColor <- function(arch_ubicaciones1) {
      sapply(arch_ubicaciones1$Departamento, function(Departamento) {
        if(Departamento == "COCHABAMBA") {
          "red"
        } else if(Departamento == "BENI"){
          "orange"
        }else if(Departamento == "TARIJA"){
          "orange"
        } else {
          "green"
        } })
    }

    ######PERSONALIZANDO ICONOS DE LOS MAPAS######
    pers_icon <- function(arch_ubicaciones1) {
      sapply(arch_ubicaciones1$Tipo_de_Oficina_1, function(Tipo_de_Oficina_1) {
        switch(as.character(Tipo_de_Oficina_1),
               "1" = "house-laptop",
               "2" = "landmark",
               "3" = "address-card",
               "4" = "calculator",
               "money")
      }

      )
    }
    #
    icons <- awesomeIcons(
      icon = pers_icon(arch_ubicaciones),
      iconColor = 'black',
      library = 'fa',
      markerColor = getColor(arch_ubicaciones)
    )

    ###MAPA#####
    leaflet(arch_shape) %>%
      addTiles() %>%
      addPolygons(
        fillColor = ~pal(densidad),
        fillOpacity = 0.6,
        color = "white",
        stroke = TRUE,
        weight = 1,
        layerId = ~NAME_1,
        group = "regions",
        label = ~paste(NAME_1,": ",densidad),
        dashArray = "3",
        highlight = highlightOptions(
          weight = 3,
          dashArray = "",
          color = "red",
          bringToFront = TRUE
        )) %>%

      addPolygons(
        fillColor = "#8a038b",
        fillOpacity = 0.5,
        weight = 1,
        color = "black",
        stroke = TRUE,
        layerId = ~CNTY_ID,
        label = ~paste(NAME_1,": ",densidad),
        group = ~NAME_1)%>%

      addAwesomeMarkers(lng=~arch_ubicaciones$Longitud,
                        lat=~arch_ubicaciones$Latitud,
                        label = ~htmlEscape(arch_ubicaciones$Nombre_Oficina),
                        layerId = ~arch_ubicaciones$Nombre_Oficina,
                        popup = paste(
                          "<b style='color:red'>Tipo de Oficina:</b>",arch_ubicaciones$Tipo_de_Oficina,
                          "<br/>",
                          "<b style='color:#56147DFF'>Nombre de Oficina</b>:",arch_ubicaciones$Nombre_Oficina,
                          "<br/>",
                          "<b style='color:#56147DFF'>Ciudad/Municipio:</b>",arch_ubicaciones$Ciudad,
                          "<br/>",
                          "<b style='color:#56147DFF'>Dirección:</b>",arch_ubicaciones$Direccion,
                          "<br/>"
                        ), icon = icons ,clusterOptions = markerClusterOptions()
      ) %>%

      hideGroup(group = arch_shape$NAME_1) %>% addLegend(pal = pal, values = ~densidad, opacity = 0.7, title = "Clientes",
                                                         position = "bottomright") %>% addResetMapButton()
  })

  proxy <- leafletProxy("map")
  selected <- reactiveValues(groups = vector())
  observeEvent(input$map_shape_click, {
    if(input$map_shape_click$group == "regions"){
      selected$groups <- c(selected$groups, input$map_shape_click$id)
      proxy %>% showGroup(group = input$map_shape_click$id)
    } else {
      selected$groups <- setdiff(selected$groups, input$map_shape_click$group)
      proxy %>% hideGroup(group = input$map_shape_click$group)
    }
    updateSelectizeInput(session,
                         inputId = "selected_locations",
                         choices = arch_shape$NAME_1,
                         selected = selected$groups)
  })

  observeEvent(input$selected_locations, {
    removed_via_selectInput <- setdiff(selected$groups, input$selected_locations)
    added_via_selectInput <- setdiff(input$selected_locations, selected$groups)

    if(length(removed_via_selectInput) > 0){
      selected$groups <- input$selected_locations
      proxy %>% hideGroup(group = removed_via_selectInput)
    }

    if(length(added_via_selectInput) > 0){
      selected$groups <- input$selected_locations
      proxy %>% showGroup(group = added_via_selectInput)
    }
  }, ignoreNULL = FALSE)

##############################################################
  ##########TABLA RESULTANTE TIPO DE RIESGO###############
  output$tabla <- renderDT({
    if (is.null(clicked_box())) {
      return(NULL)
    }

    if (clicked_box() == "box1") {
      datos_Res<-  reactivo_box_1()
      datatable(datos_Res[,c(5,7,20,23,24)]
                ,options = list(scrollX = TRUE,
                                scrollY = "250px")) %>% formatStyle(
                                  columns = c("razonSocial", "naturalezaJuridica", "sector","DPF"),
                                  target = 'cell',
                                  fontSize = '10px') %>% formatCurrency("saldoBs", currency = "Bs", digits = 0) %>% formatStyle("saldoBs", backgroundColor = "#ffe0b8")
    }
    else if (clicked_box() == "box2") {
      datos_Res<-  reactivo_box_2()
      datatable(datos_Res[,c(5,7,20,23,24)]
                ,options = list(scrollX = TRUE,
                                scrollY = "250px")) %>% formatStyle(
                                  columns = c("razonSocial", "naturalezaJuridica", "sector","DPF"),
                                  target = 'cell',
                                  fontSize = '10px')%>% formatCurrency("saldoBs", currency = "Bs", digits = 0) %>% formatStyle("saldoBs", backgroundColor = "#ffe0b8")
    }
    else if (clicked_box() == "box3") {
      datos_Res<-  reactivo_box_3()
      datatable(datos_Res[,c(5,7,20,23,24)]
                ,options = list(scrollX = TRUE,
                                scrollY = "250px")) %>% formatStyle(
                                  columns = c("razonSocial", "naturalezaJuridica", "sector","DPF"),
                                  target = 'cell',
                                  fontSize = '10px')%>% formatCurrency("saldoBs", currency = "Bs", digits = 0) %>% formatStyle("saldoBs", backgroundColor = "#ffe0b8")
    }
    else if(clicked_box() == "box4"){
      datos_Res<-reactivo_box_4()
      datatable(datos_Res[,c(15,7,10,12,8)]
                ,options = list(scrollX = TRUE,
                                scrollY = "250px")) %>% formatStyle(
                                  columns = c("razonSocial", "plazo","descEstadoProducto", "fechaDevengado"),
                                  target = 'cell',
                                  fontSize = '10px')%>% formatCurrency("Valor", currency = "Bs", digits = 0) %>% formatStyle("Valor", backgroundColor = "#ffe0b8")

    }
  })

  click_count <- reactiveVal(0)
  color1 <- reactiveVal("purple")
  color2 <- reactiveVal("purple")
  color3 <- reactiveVal("purple")
  color4 <- reactiveVal("purple")

  clicked_box <- reactiveVal(NULL)
  reset_colors <- function() {
    color1("purple")
    color2("purple")
    color3("purple")
    color4("purple")
  }

  change_color <- function(clicked) {
    reset_colors()
    if (clicked == "box1") color1("orange")
    else if (clicked == "box2") color2("orange")
    else if (clicked == "box3") color3("orange")
    else if (clicked == "box4") color4("orange")
  }

  observeEvent(input$box_1, {
    click_count(click_count() + 1)
    clicked_box("box1")
    change_color("box1")
  })
  observeEvent(input$box_2, {
    click_count(click_count() + 1)
    clicked_box("box2")
    change_color("box2")
  })

  observeEvent(input$box_3, {
    click_count(click_count() + 1)
    clicked_box("box3")
    change_color("box3")
  })
  observeEvent(input$box_4, {
    click_count(click_count() + 1)
    clicked_box("box4")
    change_color("box4")
  })


  observe({
    runjs('$("#box_1").on("click", function() {
      Shiny.onInputChange("box_1", Math.random());
    })')

    runjs('$("#box_2").on("click", function() {
      Shiny.onInputChange("box_2", Math.random());
    })')

    runjs('$("#box_3").on("click", function() {
      Shiny.onInputChange("box_3", Math.random());
    })')
    runjs('$("#box_4").on("click", function() {
      Shiny.onInputChange("box_4", Math.random());
    })')
  })


  reactivo_box_1<- reactive({
    Personas_Juridicas %>% filter(DEPARTAMENTO %in% input$selected_locations & TIPO_RIESGO=="RIESGO ALTO") %>% arrange(desc(saldoBs))
  })
  reactivo_box_2<- reactive({
    Personas_Juridicas %>% filter(DEPARTAMENTO %in% input$selected_locations & TIPO_RIESGO=="RIESGO MEDIO") %>% arrange(desc(saldoBs))
  })
  reactivo_box_3<- reactive({
    Personas_Juridicas %>% filter(DEPARTAMENTO %in% input$selected_locations & TIPO_RIESGO=="RIESGO BAJO") %>% arrange(desc(saldoBs))
  })
  reactivo_box_4<- reactive({
    datos_Res<-dpf_pj %>% filter(DEPARTAMENTO %in% input$selected_locations) %>% arrange(desc(saldoBs))
    names(datos_Res)[8]="Valor"
    datos_Res
  })

  reactivo_datos_1<- reactive({
    filas_seleccionadas <- input$tabla_rows_selected
    filas <- reactivo_box_1()[filas_seleccionadas, ]
  })
  reactivo_datos_2<- reactive({
    filas_seleccionadas <- input$tabla_rows_selected
    filas <- reactivo_box_2()[filas_seleccionadas, ]
  })
  reactivo_datos_3<- reactive({
    filas_seleccionadas <- input$tabla_rows_selected
    filas <- reactivo_box_3()[filas_seleccionadas, ]
  })
  reactivo_datos_4<- reactive({
    filas_seleccionadas <- input$tabla_rows_selected
    filas <- reactivo_box_4()[filas_seleccionadas, ]
  })



  ###############################################################################################################

  # Pestaña 2: Tablas Clientes y Saldos
  # Renderizar la tabla de clientes con las columnas requeridas
  output$clientes_saldos <- renderDT({
    datatable(
      Personas_Juridicas %>%
        select(DPF, razonSocial, objetoSocial1, TIPO_RIESGO, saldoBs) %>%
        mutate(DPF = factor(DPF, levels = c("SI", "NO"))),  # Asegúrate de que "si" esté primero
      options = list(
        scrollX = TRUE,
        scrollY = "250px",
        order = list(list(0, 'asc'), list(1, 'asc'))  # Ordenar por DPF y luego por razonSocial
      ),
      selection = 'multiple'  # Permitir selección múltiple
    )
  })

  # Renderizar la tabla de depósitos a plazo basada en la selección de la primera tabla
  output$depositos_plazo <- renderDT({
    req(input$clientes_saldos_rows_selected)  # Asegurarse de que hay filas seleccionadas
    selected_rows <- input$clientes_saldos_rows_selected

    datatable(
      dpf_pj %>% filter(razonSocial %in% Personas_Juridicas$razonSocial[selected_rows]) %>% select(razonSocial, saldoBs),
      options = list(scrollX = TRUE, scrollY = "250px")
    )
  })

  # Renderizar la tabla de tipo de actividad basada en la selección de la primera tabla
  output$tipo_actividad <- renderDT({
    req(input$clientes_saldos_rows_selected)  # Asegurarse de que hay filas seleccionadas
    selected_rows <- input$clientes_saldos_rows_selected

    datatable(
      Personas_Juridicas %>% filter(razonSocial %in% Personas_Juridicas$razonSocial[selected_rows]) %>% select(actividadEconomica, saldoBs),
      options = list(scrollX = TRUE, scrollY = "250px")
    )
  })

  output$graf_transac <- renderHighchart({
    req(input$clientes_saldos_rows_selected)  # Asegurarse de que hay filas seleccionadas en la tabla de clientes
    selected_rows <- input$clientes_saldos_rows_selected

    # Filtrar datos según la selección
    datos <- Personas_Juridicas_Transacciones %>%
      filter(codPersona %in% Personas_Juridicas$codPersona[selected_rows])  # Filtrar por codPersona de las filas seleccionadas

    # Contar transacciones
    datos_res <- datos %>% count(fechaTransaccion1, descConceptoMovimiento, wt = importeBs)

    if (nrow(datos_res) > 0) {
      # Generar gráfico
      hchart(datos_res, "spline", hcaes(x = fechaTransaccion1, y = n, group = descConceptoMovimiento),
             dataLabels = list(enabled = FALSE)) %>%
        hc_add_theme(hc_theme_google()) %>%
        hc_colors(c("#56147DFF", "orange", "#40498EFF", "#C73D73FF", "#FA7D5EFF", "#FEAA74FF",
                    "#FCECAEFF", "#521E4DFF", "#701F57FF", "#8E1D5BFF", "#CB1B4FFF", "#E13342FF",
                    "#EE543FFF", "#F37651FF", "#F5966DFF", "#F6B48EFF", "#F7D0B4FF")) %>%
        hc_yAxis(title = list(text = "")) %>%
        hc_xAxis(title = list(text = ""))
    }
  })

  # Pestaña 3: Lista completa de clientes
  output$lista_clientes <- renderDT({
    datatable(Personas_Juridicas %>% select(razonSocial, numeroDocumento), options = list(scrollX = TRUE, scrollY = "600px"))
  })

######################################
  ##########CARPETAS#########

  data_clientes <- Personas_Juridicas %>%
    select(razonSocial, numeroDocumento, objetoSocial1, naturalezaJuridica, sector)

  output$tabla_clientes <- renderDT({
    datatable(data_clientes, selection = 'single', options = list(scrollX = TRUE))
  })

  cliente_seleccionado <- reactive({
    req(input$tabla_clientes_rows_selected)
    data_clientes[input$tabla_clientes_rows_selected, ]
  })

  carpetas_cliente <- reactive({
    cliente <- cliente_seleccionado()
    req(cliente)
    cliente_dir <- file.path("documentos", as.character(cliente$numeroDocumento))
    if(!dir.exists(cliente_dir)) return(character(0))
    list.dirs(cliente_dir, full.names = FALSE, recursive = FALSE)
  })

  output$selector_carpetas <- renderUI({
    carpetas <- carpetas_cliente()
    if(length(carpetas) == 0) {
      return(tags$em("No se encontraron carpetas para este cliente"))
    }
    selectInput("carpeta_seleccionada", "Seleccione Carpeta:", choices = carpetas)
  })

  archivos_en_carpeta <- reactive({
    cliente <- cliente_seleccionado()
    req(cliente, input$carpeta_seleccionada)
    carpeta <- input$carpeta_seleccionada
    dir_pdf <- file.path("documentos", as.character(cliente$numeroDocumento), carpeta)
    if(!dir.exists(dir_pdf)) return(character(0))
    list.files(dir_pdf, pattern = "\\.pdf$", full.names = FALSE, ignore.case = TRUE)
  })

  output$selector_pdfs <- renderUI({
    archivos <- archivos_en_carpeta()
    if(length(archivos) == 0) {
      return(tags$em("No hay documentos PDF en la carpeta seleccionada"))
    }
    selectInput("pdf_seleccionado", "Seleccione Documento PDF:", choices = archivos)
  })

  output$visor_pdf <- renderUI({
    req(input$pdf_seleccionado)
    cliente <- cliente_seleccionado()
    req(cliente)
    carpeta <- input$carpeta_seleccionada
    src <- file.path("documentos", as.character(cliente$numeroDocumento), carpeta, input$pdf_seleccionado)
    src_url <- URLencode(src)  # Correg ido aquí
    tags$iframe(src = src_url, style = "width:100%; height:600px;", frameborder = 0)
  })

  # Subida de archivos
  observeEvent(input$subir_btn, {
    req(input$archivo_subido)
    req(cliente_seleccionado())
    req(input$carpeta_seleccionada)

    cliente <- cliente_seleccionado()
    carpeta <- input$carpeta_seleccionada

    dir_cliente <- file.path("documentos", as.character(cliente$numeroDocumento), carpeta)
    dir.create(dir_cliente, recursive = TRUE, showWarnings = FALSE)

    archivo_destino <- file.path(dir_cliente, input$archivo_subido$name)

    success <- file.copy(from = input$archivo_subido$datapath, to = archivo_destino, overwrite = TRUE)

    if(success) {
      output$mensaje_subida <- renderUI({
        tags$div(style = "color:green;", "Archivo subido correctamente.")
      })

      # Actualizar selector de archivos
      archivos_act <- list.files(dir_cliente, pattern = "\\.pdf$", full.names = FALSE, ignore.case = TRUE)
      updateSelectInput(session, "pdf_seleccionado", choices = archivos_act, selected = input$archivo_subido$name)
    } else {
      output$mensaje_subida <- renderUI({
        tags$div(style = "color:red;", "Error al subir el archivo.")
      })
    }
  })

  # Registrar carpeta documentos para servir estáticos
  shiny::addResourcePath("documentos", "documentos")

  ###########################
}

shinyApp(ui, server)
